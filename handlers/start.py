from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardRemove
from keyboards.start import start_kb
from keyboards.final import final
from keyboards.calc import calc_order
from get_cny import get_cny
from keyboards.admin import text_admin
from keyboards.recalc import recalc
from keyboards.main import main_menu
from keyboards.order_type import order_type_calc
from aiogram.types import CallbackQuery
from fsm import calc_quiz, order_quiz

from aiogram.fsm.context import FSMContext

from calc_order_func import calc_order_func

from main import *

router = Router()  # [1]

@router.message(Command("start"))  # [2]
async def cmd_start(message: Message):
    await message.answer(
        f"<b>{message.from_user.first_name}</b>, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –≥—Ä—É–ø–ø—ã –ö—É–Ω–≥-—Ñ—É –¥–µ–ª–∏–≤–µ—Ä–∏!\n–ù–∞—à–∞ –≥—Ä—É–ø–ø–∞ –ø–æ–º–æ–∂–µ—Ç –í–∞–º –≤—ã–∫—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä—ã —Å <b>–∫–∏—Ç–∞–π—Å–∫–∏—Ö</b> –ø–ª–æ—â–∞–¥–æ–∫ <b>POIZON</b> –∏ <b>TAOBAO</b>.\n\n–ö—Ä–∞—Ç—á–∞–π—à–∏–µ —Å—Ä–æ–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–æ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–∞ 7-10 –¥–Ω–µ–π —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ–∫—É–ø–∫–∏, –∑–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º –ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã—Ö –¥–Ω–µ–π",
        parse_mode='html',
        reply_markup=start_kb()
    )

@router.callback_query(F.data == 'main_menu')  # [2]
async def cmd_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        f"<b>{callback.from_user.first_name}</b>, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –≥—Ä—É–ø–ø—ã –ö—É–Ω–≥-—Ñ—É –¥–µ–ª–∏–≤–µ—Ä–∏!\n–ù–∞—à–∞ –≥—Ä—É–ø–ø–∞ –ø–æ–º–æ–∂–µ—Ç –í–∞–º –≤—ã–∫—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä—ã —Å <b>–∫–∏—Ç–∞–π—Å–∫–∏—Ö</b> –ø–ª–æ—â–∞–¥–æ–∫ <b>POIZON</b> –∏ <b>TAOBAO</b>.\n\n–ö—Ä–∞—Ç—á–∞–π—à–∏–µ —Å—Ä–æ–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–æ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–∞ 7-10 –¥–Ω–µ–π —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ–∫—É–ø–∫–∏, –∑–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º –ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã—Ö –¥–Ω–µ–π",
        parse_mode='html',
        reply_markup=start_kb()
    )

    await state.clear()

@router.callback_query(F.data == 'order')
async def new_order(callback: CallbackQuery, state: FSMContext):
    await state.set_state(order_quiz.Order.item_type)
    await callback.message.answer(
        "–í—ã–±–µ—Ä–µ—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:",
        reply_markup=order_type_calc()
    )
@router.callback_query(order_quiz.Order.item_type)
async def new_order(callback: CallbackQuery, state: FSMContext):
    await state.update_data(item_type=callback.data)
    await state.set_state(order_quiz.Order.link)
    await callback.message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä"
    )

@router.message(order_quiz.Order.link)
async def order_link(message: Message, state: FSMContext):
    await state.update_data(link=message.text)
    await state.set_state(order_quiz.Order.photo)

    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ç–æ–≤–∞—Ä–∞")

@router.message(order_quiz.Order.photo)
async def order_photo(message: Message, state: FSMContext):
    file_id = message.photo[-1].file_id
    await state.update_data(photo=file_id)
    await state.set_state(order_quiz.Order.size)

    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à —Ä–∞–∑–º–µ—Ä")

@router.message(order_quiz.Order.size)
async def order_size(message: Message, state: FSMContext):
    await state.update_data(size=message.text)
    await state.set_state(order_quiz.Order.color)

    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, <b>—Ü–≤–µ—Ç/–º–æ–¥–µ–ª—å/–∞—Ä–æ–º–∞—Ç</b> —Ç–æ–≤–∞—Ä–∞", parse_mode='html')

@router.message(order_quiz.Order.color)
async def order_color(message: Message, state: FSMContext):
    await state.update_data(color=message.text)
    await state.set_state(order_quiz.Order.price)

    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ü–µ–Ω—É –Ω–∞ —Ç–æ–≤–∞—Ä. <b>–í —é–∞–Ω—è—Ö</b>", parse_mode='html')

@router.message(order_quiz.Order.price)
async def order_price(message: Message, state: FSMContext):
    await state.update_data(price=message.text)
    await state.set_state(order_quiz.Order.promo)

    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–º–æ–∫–æ–¥.\n\n<b>–ï—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç, —Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Ç–µ –ø—Ä–æ—á–µ—Ä–∫(-)</b>", parse_mode='html')

@router.message(order_quiz.Order.promo)
async def order_promo(message: Message, state: FSMContext):
    await state.update_data(promo=message.text)
    await state.set_state(order_quiz.Order.phone)

    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞/–ø–æ—á—Ç—É")

@router.message(order_quiz.Order.phone)
async def final_order(message: Message, state: FSMContext):
    await state.update_data(phone=message.text)
    await state.update_data(name=message.from_user.first_name)
    await state.update_data(username=message.from_user.username)
    
    data = await state.get_data()
    item_type = data["item_type"]
    print(item_type)
    link = data["link"]
    photo = data["photo"]
    size = data["size"]
    color = data["color"]
    price = data["price"]
    promo = data["promo"]
    price = calc_order_func(int(price), item_type, promo)
    phone = data["phone"]

    if item_type == 'summer':
        item_type = '–ö—É—Ä—Ç–∫–∏ü•º/–ö—Ä–æ—Å—Å–æ–≤–∫–∏üëü'
    
    if item_type == 'winter':
        item_type = '–ó–∏–º–Ω—è—è –æ–±—É–≤—åü•æ/–í–µ—Ä—Ö–Ω—è—è –æ–¥–µ–∂–¥–∞üëó'
    
    if item_type == 'shirt':
        item_type = '–§—É—Ç–±–æ–ª–∫–∏üëï/–†—É–±–∞—à–∫–∏üëî/–®–æ—Ä—Ç—ãü©≥'

    if item_type == 'jeans':
        item_type = '–®—Ç–∞–Ω—ãüëñ/–¢–æ–ª—Å—Ç–æ–≤–∫–∏ü¶∫/–õ–µ—Ç–Ω—è—è –æ–±—É–≤—åüëü'
    
    if item_type == 'parf':
        item_type = '–ü–∞—Ä—Ñ—é–ºüëë/–ê–∫—Å–µ—Å—Å—É–∞—Ä—ãüíç'
    
    if item_type == 'bag':
        item_type = '–†—é–∫–∑–∞–∫–∏üéí/–°—É–º–∫–∏üëú'
    
    if item_type == 'socks':
        item_type = '–ù–æ—Å–∫–∏üß¶/–ö–µ–ø–∫–∏üß¢/–ù–∏–∂–Ω–µ–µ –±–µ–ª—å–µü©≤'

    await message.answer_photo(photo, caption=f"<b>–í–∞—à –∑–∞–∫–∞–∑ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω!</b>\n–ü–µ—Ä–µ–¥ —Ñ–∏–Ω–∞–ª–æ–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—Å –º–µ–Ω–µ–¥–∂–µ—Ä, —á—Ç–æ–±—ã —É—Ç–æ—á–Ω–∏—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–µ—Ç–∞–ª–∏\n<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {item_type}</b>\n<b>–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä: {link}</b>\n<b>–†–∞–∑–º–µ—Ä —Ç–æ–≤–∞—Ä–∞: {size}</b>\n<b>–¶–≤–µ—Ç —Ç–æ–≤–∞—Ä–∞: {color}</b>\n<b>–°—Ç–æ–∏–º–æ—Å—Ç—å: {round(price['total'],2)}</b>\n<b>–°—Ç–æ–∏–º–æ—Å—Ç—å –±–µ–∑ –ø—Ä–æ–º–æ–∫–æ–¥–∞: {round(price['total_without_promo'],2)}</b>\n<b>–ü—Ä–æ–º–æ–∫–æ–¥: {promo}</b>\n<b>–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {phone}, {message.from_user.first_name}  {message.from_user.last_name},  @{message.from_user.username}</b>\n\n---\n\n–ü—Ä–æ—Å–∏–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –≤—Å–µ –≤–µ—Ä–Ω–æ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É:", 
                                               parse_mode='html',
                                               reply_markup=final())

@router.callback_query(F.data == "final_order")
async def send_message(callback: CallbackQuery, state: FSMContext):
    await state.update_data()
    data = await state.get_data()
    item_type = data["item_type"]
    link = data["link"]
    photo = data["photo"]
    size = data["size"]
    color = data["color"]
    price = data["price"]
    promo = data["promo"]
    price_cny = data["price"]
    price = calc_order_func(int(price), item_type, promo)
    phone = data["phone"]
    name = data["name"]
    username = data["username"]

    if item_type == 'summer':
        item_type = '–ö—É—Ä—Ç–∫–∏ü•º/–ö—Ä–æ—Å—Å–æ–≤–∫–∏üëü'
    
    if item_type == 'winter':
        item_type = '–ó–∏–º–Ω—è—è –æ–±—É–≤—åü•æ/–í–µ—Ä—Ö–Ω—è—è –æ–¥–µ–∂–¥–∞üëó'
    
    if item_type == 'shirt':
        item_type = '–§—É—Ç–±–æ–ª–∫–∏üëï/–†—É–±–∞—à–∫–∏üëî/–®–æ—Ä—Ç—ãü©≥'

    if item_type == 'jeans':
        item_type = '–®—Ç–∞–Ω—ãüëñ/–¢–æ–ª—Å—Ç–æ–≤–∫–∏ü¶∫/–õ–µ—Ç–Ω—è—è –æ–±—É–≤—åüëü'
    
    if item_type == 'parf':
        item_type = '–ü–∞—Ä—Ñ—é–ºüëë/–ê–∫—Å–µ—Å—Å—É–∞—Ä—ãüíç'
    
    if item_type == 'bag':
        item_type = '–†—é–∫–∑–∞–∫–∏üéí/–°—É–º–∫–∏üëú'
    
    if item_type == 'socks':
        item_type = '–ù–æ—Å–∫–∏üß¶/–ö–µ–ø–∫–∏üß¢/–ù–∏–∂–Ω–µ–µ –±–µ–ª—å–µü©≤'

    await callback.bot.send_photo('-1002127645159',photo, caption=f"<b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!</b>\n–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞\n\n<b>–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä: {link}</b>\n<b>–†–∞–∑–º–µ—Ä —Ç–æ–≤–∞—Ä–∞: {size}</b>\n<b>–¶–≤–µ—Ç —Ç–æ–≤–∞—Ä–∞: {color}</b>\n<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {item_type}</b>\n<b>–°—Ç–æ–∏–º–æ—Å—Ç—å –≤ –Æ–∞–Ω—è—Ö: {price_cny}</b>\n<b>–°—Ç–æ–∏–º–æ—Å—Ç—å: {round(price['total'],2)}</b>\n<b>–°—Ç–æ–∏–º–æ—Å—Ç—å –±–µ–∑ –ø—Ä–æ–º–æ–∫–æ–¥–∞: {round(price['total_without_promo'],2)}</b>\n<b>–ü—Ä–æ–º–æ–∫–æ–¥: {promo}</b>\n<b>–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {phone}, {name}  @{username}</b>\n", 
                                parse_mode='html',)
    
    await callback.message.answer("–û—Ç–ª–∏—á–Ω–æ! –û–ø–ª–∞—á–∏–≤–∞–π—Ç–µ —Ç–æ–≤–∞—Ä üí∏ –ø–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º –Ω–∏–∂–µ –∏ –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞.\n\n<code>2202 2080 8468 3904</code>\n\n–†—É—á–∫–æ –ú–∞–∫—Å–∏–º –ï–≤–≥–µ–Ω—å–µ–≤–∏—á. –°–±–µ—Ä–±–∞–Ω–∫", parse_mode='html')

    await state.clear()    

@router.callback_query(F.data == 'current_rates')
async def current_rate(callback: CallbackQuery):
    try:
        rate = get_cny()['rub_rate_plus']
    except Exception as e:
        await callback.message.answer(
            '–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –±–∏—Ä–∂–∞ –¥–ª—è —Å–±–æ—Ä–∞ –∫—É—Ä—Å–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø—Ä–æ—Å—å–±–∞ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –ê–¥–º–∏–Ω—É',
            reply_markup=main_menu()
        )
        
    await callback.message.answer(
        f"–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å –ø–æ –¶–ë –†–§ - <b>{rate} –†–£–ë.</b>\n\n–ö—É—Ä—Å —Ä–∞—Å—Å—á–∏—Ç–∞–Ω —Å —É—á–µ—Ç–æ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ ‚ÇΩ –≤ ¬• –∏ –∫–æ–º–∏—Å—Å–∏–∏ –∑–∞ –ø–µ—Ä–µ–≤–æ–¥ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—É.",
        parse_mode='html',
        reply_markup=main_menu()
    )

@router.callback_query(F.data == "calc")
async def calc(callback: CallbackQuery, state: FSMContext):
    await state.set_state(calc_quiz.CalcForm.item_type)
    await callback.message.answer(
        "–í –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–µ –≤—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–æ–≤ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π –¥–æ —Å–∫–ª–∞–¥–∞ –≤–æ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–µ, —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤–∫–ª—é—á–∞–µ—Ç:\n- –î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –ö–∏—Ç–∞—é\n- –î–æ—Å—Ç–∞–≤–∫–∞ –ö–∏—Ç–∞–π - –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫\n- –ö–æ–º–∏—Å—Å–∏—è –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞.\n\n<b>–í—ã–±–µ—Ä–µ—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:</b>",
        parse_mode="html",
        reply_markup=calc_order()
    )
@router.callback_query(calc_quiz.CalcForm.item_type)
async def calc_price(callback: CallbackQuery, state: FSMContext):
    await state.update_data({'item_type':callback.data})
    data = await state.get_data()
    data = data['item_type']
    if data != 'not_found' and data != 'reply_to_admin':
        await state.set_state(calc_quiz.CalcForm.price)
        await callback.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ —Ü–µ–Ω—É –≤ –Æ–∞–Ω—è—Ö –Ω–∞ –±–µ—Ä—é–∑–æ–≤–æ–º —Ñ–æ–Ω–µ")
    else:
        await callback.message.answer(
            '<b>–î—Ä—É–∑—å—è, –≤ —Å–≤—è–∑–∏ —Å —Ç–µ–º, —á—Ç–æ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∏–º–µ—é—Ç —Å–ª–∏—à–∫–æ–º —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–π –≤—ã–±–æ—Ä, –ø—Ä–æ—Å—á–∏—Ç–∞—Ç—å –∏—Ö —Ç–æ—á–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–æ–∑–º–æ–∂–Ω—ã–º</b>,—Ç–∞–∫ –∫–∞–∫ –æ–¥–Ω–∏–º –∏–∑ —Å–∞–º—ã—Ö –≥–ª–∞–≤–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–∞—Ö —è–≤–ª—è–µ—Ç—Å—è <b>–¥–æ—Å—Ç–∞–≤–∫–∞</b>\n\n–î–æ—Å—Ç–∞–≤–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–∑–∫–∞—Ö –∏–∑ –ö–∏—Ç–∞—è –≤ –†–æ—Å—Å–∏—é –≤—ã—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ —á–µ—Ä–µ–∑ –æ–±—ä–µ–º–Ω—ã–π –≤–µ—Å –∏ –∫–∏–ª–æ–≥—Ä–∞–º–º—ã.\n\n–ï—Å–ª–∏ –í–∞—à–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ —Å–ø–∏—Å–∫–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –Ω–µ—Ç, —Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É –∏ –æ–Ω —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –ø–æ–º–æ–∂–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –í–∞—à –∑–∞–∫–∞–∑ üòä',
            parse_mode='html',
            reply_markup=text_admin()
        )
        await state.clear()
@router.message(calc_quiz.CalcForm.price)
async def calc_promo(message: Message, state: FSMContext):
    await state.update_data({'price': message.text})
    await state.set_state(calc_quiz.CalcForm.promo)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥, –µ—Å–ª–∏ –æ–Ω —É –≤–∞—Å –µ—Å—Ç—å <b>–ï—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç, —Ç–æ –ø–æ—Å—Ç–∞–≤—å—Ç–µ –ø—Ä–æ—á–µ—Ä–∫(-)</b>",
        parse_mode='html'
        )

@router.message(calc_quiz.CalcForm.promo)
async def total(message: Message, state: FSMContext):
    await state.update_data({"promo":message.text})
    price =  await state.get_data()
    print(price)
    item_type = await state.get_data()
    promo = await state.get_data()

    price, item_type, promo = price["price"], item_type["item_type"], promo["promo"]

    res = calc_order_func(int(price), item_type, promo)

    await message.answer(
        f"–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞:\n\n–ë–µ–∑ —É—á—ë—Ç–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞:<b>{int(res['total_without_promo'])} –†–£–ë</b>\n–° —É—á—ë—Ç–æ–º –ø—Ä–æ–º–æ–∫–æ–¥–∞:<b>{int(res['total'])} –†–£–ë</b> + —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ –†–§ –°–î–≠–ö (—Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ)",
        parse_mode='html',
        reply_markup=recalc()
    )
    await state.clear()
    